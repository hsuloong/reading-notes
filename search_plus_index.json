{"./":{"url":"./","title":"README简介","keywords":"","body":"读书笔记 master：本分支，也是Gitbook源文件分支 gh-pages：Gitbook发布分支 https://hsuloong.github.io/reading-notes/ 笔记结构 每本书独立成一章。 开始吧，少年！ 多读书，读好书！ 前端技术栈 Head First HTML与CSS 后端技术栈 C++ Primer中文版 第5版(C++ Primer, 5th Edition) C++ Primer习题集 第5版 其他 执行：如何完成任务的学问(Execution: The Discipline of Getting Things Done) 更新日志 2021/01/05 1.完成阅读《Head First HTML与CSS》 2020/12/20 1.开始阅读《Head First HTML与CSS》 2020/05/31 1.初始化读书笔记GitBook仓库 2.初始化读书笔记结构 技术栈路线图 Copyright © hsuloong.github.io 2020 all right reserved，powered by Gitbook编辑于： 2021-01-06 14:27:27 "},"execution-the-discipline-of-getting-things-done/":{"url":"execution-the-discipline-of-getting-things-done/","title":"执行：如何完成任务的学问","keywords":"","body":"执行：如何完成任务的学问 执行：如何完成任务的学问一书由拉里・博西迪(Larry Bossidy)和(Ram Charan)合著，是一本关于如何实现目标【执行】的书。 大纲 思维导图源文件 阅读日志 2020/06/02 1.整理完大纲 2020/05/31 1.整理读书笔记 Copyright © hsuloong.github.io 2020 all right reserved，powered by Gitbook编辑于： 2021-01-06 14:27:27 "},"execution-the-discipline-of-getting-things-done/Part-1.html":{"url":"execution-the-discipline-of-getting-things-done/Part-1.html","title":"第一部分：为什么需要执行","keywords":"","body":"第一部分：为什么需要执行 Copyright © hsuloong.github.io 2020 all right reserved，powered by Gitbook编辑于： 2021-01-06 14:27:27 "},"execution-the-discipline-of-getting-things-done/Part-2.html":{"url":"execution-the-discipline-of-getting-things-done/Part-2.html","title":"第二部分：执行的要素","keywords":"","body":"第二部分：执行的要素 Copyright © hsuloong.github.io 2020 all right reserved，powered by Gitbook编辑于： 2021-01-06 14:27:27 "},"execution-the-discipline-of-getting-things-done/Part-3.html":{"url":"execution-the-discipline-of-getting-things-done/Part-3.html","title":"第三部分：执行的三个核心流程","keywords":"","body":"第三部分：执行的三个核心流程 Copyright © hsuloong.github.io 2020 all right reserved，powered by Gitbook编辑于： 2021-01-06 14:27:27 "},"cplusplus-primer-5th-edition/":{"url":"cplusplus-primer-5th-edition/","title":"C++ Primer中文版 第5版","keywords":"","body":"C++ Primer中文版 第5版 Copyright © hsuloong.github.io 2020 all right reserved，powered by Gitbook编辑于： 2021-01-06 14:27:58 "},"cplusplus-primer-5th-edition/Part-1.html":{"url":"cplusplus-primer-5th-edition/Part-1.html","title":"C++基础","keywords":"","body":"C++基础 Copyright © hsuloong.github.io 2020 all right reserved，powered by Gitbook编辑于： 2021-01-06 14:27:58 "},"cplusplus-primer-5th-edition/Part-2.html":{"url":"cplusplus-primer-5th-edition/Part-2.html","title":"C++标准库","keywords":"","body":"C++标准库 Copyright © hsuloong.github.io 2020 all right reserved，powered by Gitbook编辑于： 2021-01-06 14:27:58 "},"cplusplus-primer-5th-edition/Part-3.html":{"url":"cplusplus-primer-5th-edition/Part-3.html","title":"类设计者的工具","keywords":"","body":"类设计者的工具 Copyright © hsuloong.github.io 2020 all right reserved，powered by Gitbook编辑于： 2021-01-06 14:27:58 "},"cplusplus-primer-5th-edition/Part-4.html":{"url":"cplusplus-primer-5th-edition/Part-4.html","title":"高级主题","keywords":"","body":"高级主题 Copyright © hsuloong.github.io 2020 all right reserved，powered by Gitbook编辑于： 2021-01-06 14:27:58 "},"cplusplus-concurrency-in-action/":{"url":"cplusplus-concurrency-in-action/","title":"C++ Concurrency in Action:Practical Multithreading","keywords":"","body":"C++ Concurrency in Action:Practical Multithreading C++ Concurrency in Action:Practical Multithreading一书由Anthony Williams所著，书中详细介绍了C++11标准库并发部份。 大纲 思维导图源文件 阅读日志 2020/08/16 1.完成整本书的略读 Copyright © hsuloong.github.io 2020 all right reserved，powered by Gitbook编辑于： 2021-01-06 14:27:27 "},"cplusplus-concurrency-in-action/Part-1.html":{"url":"cplusplus-concurrency-in-action/Part-1.html","title":"C++并发入门","keywords":"","body":"Hello, world of concurrency in C++ C++11标准引入了多线程的支持(std::thread等其他并发相关的库)； 什么是Concurrency：多个独立的活动同时进行； 计算机中的Concurrency：一台计算机同时进行着多个相互独立的应用； 中文里的并发：多个任务看似在同时跑，实际是不停的在切换中文里的并行：多个任务真的在同时跑 Concurrency实现方式 (1)多线程：内存地址空间共享 (2)多进程：内存地址空间独立互不干扰 为啥使用Concurrency：[separation of concerns] & [performance] separation of concerns：分离独立的逻辑，使得程序易于实现、理解和测试 performance：单任务分解成多个部分并行计算；已有的并行方法解决更大的问题 啥时候不该使用Concurrency：好处小于代价 👀 并发代码难以理解：复杂和难以理解使得Bug更多 业务时间启动/切换进程/线程的时间 过多的线程：线程有一些私有栈，大量消耗进程地址空间【PS：线程池，但不是银弹】 如果每个线程有一个网络连接：大量连接耗尽系统资源 C++ Concurrency：多线程 Copyright © hsuloong.github.io 2020 all right reserved，powered by Gitbook编辑于： 2021-01-06 14:27:27 "},"cplusplus-concurrency-in-action/Part-2.html":{"url":"cplusplus-concurrency-in-action/Part-2.html","title":"管理线程","keywords":"","body":"管理线程 Copyright © hsuloong.github.io 2020 all right reserved，powered by Gitbook编辑于： 2021-01-06 14:27:58 "},"cplusplus-concurrency-in-action/Part-3.html":{"url":"cplusplus-concurrency-in-action/Part-3.html","title":"线程间数据共享","keywords":"","body":"线程间数据共享 Copyright © hsuloong.github.io 2020 all right reserved，powered by Gitbook编辑于： 2021-01-06 14:27:58 "},"cplusplus-concurrency-in-action/Part-4.html":{"url":"cplusplus-concurrency-in-action/Part-4.html","title":"并发操作同步","keywords":"","body":"并发操作同步 Copyright © hsuloong.github.io 2020 all right reserved，powered by Gitbook编辑于： 2021-01-06 14:27:58 "},"cplusplus-concurrency-in-action/Part-5.html":{"url":"cplusplus-concurrency-in-action/Part-5.html","title":"C++内存模型以及原子操作","keywords":"","body":"C++内存模型以及原子操作 Copyright © hsuloong.github.io 2020 all right reserved，powered by Gitbook编辑于： 2021-01-06 14:27:58 "},"cplusplus-concurrency-in-action/Part-6.html":{"url":"cplusplus-concurrency-in-action/Part-6.html","title":"设计有锁的并发数据结构","keywords":"","body":"设计有锁的并发数据结构 Copyright © hsuloong.github.io 2020 all right reserved，powered by Gitbook编辑于： 2021-01-06 14:27:58 "},"cplusplus-concurrency-in-action/Part-7.html":{"url":"cplusplus-concurrency-in-action/Part-7.html","title":"设计无锁的数据结构","keywords":"","body":"设计无锁的数据结构 Copyright © hsuloong.github.io 2020 all right reserved，powered by Gitbook编辑于： 2021-01-06 14:27:58 "},"cplusplus-concurrency-in-action/Part-8.html":{"url":"cplusplus-concurrency-in-action/Part-8.html","title":"设计并发代码","keywords":"","body":"设计并发代码 Copyright © hsuloong.github.io 2020 all right reserved，powered by Gitbook编辑于： 2021-01-06 14:27:58 "},"cplusplus-concurrency-in-action/Part-9.html":{"url":"cplusplus-concurrency-in-action/Part-9.html","title":"高级线程管理","keywords":"","body":"高级线程管理 Copyright © hsuloong.github.io 2020 all right reserved，powered by Gitbook编辑于： 2021-01-06 14:27:58 "},"cplusplus-concurrency-in-action/Part-10.html":{"url":"cplusplus-concurrency-in-action/Part-10.html","title":"测试和Debug多线程程序","keywords":"","body":"测试和Debug多线程程序 Copyright © hsuloong.github.io 2020 all right reserved，powered by Gitbook编辑于： 2021-01-06 14:27:58 "},"head-first-html-and-css/":{"url":"head-first-html-and-css/","title":"Head First HTML and CSS","keywords":"","body":"Head First HTML与CSS Head First HTML与CSS目录结构 ├─images // 笔记用到的媒体资源 └─practices // 练习 ├─absolute // CSS 绝对定位练习 ├─form // HTML 表单练习 ├─journal // HTML 列表练习 ├─journal-css // CSS 字体系列练习 ├─journal-table // HTML5 table练习 ├─lounge // HTML 超链接练习 ├─lounge-css // CSS 类选择器练习 ├─lounge-css-plus // CSS id选择器和子孙选择器练习 ├─mypod // HTML img元素练习 ├─starbuzz // HTML body定义CSS练习 ├─starbuzz-css // HTML 外部样式练习 |─starbuzz-html5 // HTML5 练习 └─tabledisplay // CSS 布局练习 Copyright © hsuloong.github.io 2020 all right reserved，powered by Gitbook编辑于： 2021-01-06 14:27:27 "},"head-first-html-and-css/Part-01.html":{"url":"head-first-html-and-css/Part-01.html","title":"认识HTML","keywords":"","body":"认识HTML HTML：Hypertext Markup Language，超文本标记语言 超文本：是一种能够包含链接的文本形式，可以使得用户从一段文本移动到另外一段文本 Hypertext is text displayed on a computer display or other electronic devices with references (hyperlinks) to other text that the reader can immediately access. 标记语言：通过给文档添加注释以格式化文本的的语言，比如XML和XHTML都是标记语言 元素：开始标记 + 内容 + 结束标记，比如内容 CSS：Cascading Style Sheets，级联样式表(层叠样式表) 层叠的意思多个样式叠加形成最终效果， 样式来源有开发者、读者和浏览器， CSS通过组合这些样式形成文档的表现形式 Copyright © hsuloong.github.io 2020 all right reserved，powered by Gitbook编辑于： 2021-01-06 14:27:27 "},"head-first-html-and-css/Part-02.html":{"url":"head-first-html-and-css/Part-02.html","title":"深入了解超文本","keywords":"","body":"深入了解超文本 a元素：元素中的内容会成为Web页面中可单击的文本，当单击后浏览器将会根据href确定单击指向的页面 属性：指定一个元素的附加信息，形式为属性名=\"属性值\" href：Hypertext reference，超文本引用，可以指向超文本或者其他各种各样的资源 Copyright © hsuloong.github.io 2020 all right reserved，powered by Gitbook编辑于： 2021-01-06 14:27:27 "},"head-first-html-and-css/Part-03.html":{"url":"head-first-html-and-css/Part-03.html","title":"构建模块","keywords":"","body":"构建模块 可能的步骤： 1.根据内容设计HTML草图 2.创建HTML的基本构件模块(`、、、等`) 3.将内容翻译成HTML 4.改进.... 两个引用元素 1.：主要用于短引用，有些浏览器会自动加上双引号，是一个内联元素 2.：主要用于长引用，浏览器会创建一个文本块并进行缩进，是一个块元素 块元素与内联元素： 表现上块元素“特立独行”，前后看上去都有换行； 内联元素则是“随波逐流”，出现在行内； PS：既可以是块元素也可以是内联元素，则处于两者之间一个模糊地带 换行元素： void元素：没有任何内容的元素，比如、 列表元素： 1.：用于包围列表内容，list item，是块元素 2.：包围后代表有序列表，ordered list，是块元素 3.：包围后代表无序列表,unordered list，是块元素 PS：要与或ul成对出现，用于标识每一个元素，/把内容归为一组，列表元素可以嵌套 嵌套 把一个元素放在另外一个元素中成为嵌套，嵌套关系可以形成一棵树 graph TB; 1((html))-->2((head)) 1-->3((body)) 2-->4((title)) 3-->5((p)) 5-->6((q)) 特殊字符 由于浏览器使用了<>标记，如果需要在内容里面插入则需要转义 比如''转义为'&lt;'，'&'转义为'&amp;' 具体可参见：https://dev.w3.org/html5/html-author/charref 和 https://www.unicode.org/charts/ 元素大杂烩 1.：显式计算机程序代码 2.：日期元素 3.：标记特别强调的文本 4.：按照输入的格式展示文本，会保留输入中的换行 Copyright © hsuloong.github.io 2020 all right reserved，powered by Gitbook编辑于： 2021-01-06 14:27:27 "},"head-first-html-and-css/Part-04.html":{"url":"head-first-html-and-css/Part-04.html","title":"Web之旅","keywords":"","body":"Web之旅 域名 www.starbuzzcoffee.com：网站名 www：域中一个特定的服务器 starbuzzcoffee.com：域名 默认页面 如果URL是一个目录的话，Web服务器会尝试使用默认文件 相对路径链接：同一个网站内的链接页面使用相对路径而不是绝对路径 title属性 1.元素添加该属性后鼠标移动上去后会显示，对视力障碍者也十分有用，因为有的浏览器会读出来 2.可以为任何元素添加该属性 id属性 可以标识元素，通过该属性可以直接链接到，URL+#+id的形式 比如：www.some-web.com/index.html#id 可以为任何元素添加该属性 元素的target属性 告诉浏览器使用某个目标窗口打开链接 如果属性为\"_blank\"则总是打开一个新窗口 如果没有这个属性则总是在同一个窗口打开这个链接 Copyright © hsuloong.github.io 2020 all right reserved，powered by Gitbook编辑于： 2021-01-06 14:27:27 "},"head-first-html-and-css/Part-05.html":{"url":"head-first-html-and-css/Part-05.html","title":"为页面增加图像","keywords":"","body":"为页面增加图像 Web世界的图像格式 1.JPEG：照片和复杂图像使用这个，有损格式，不支持透明度 2.PNG：适用于logo，无损格式，支持透明度 3.GIF：支持动画，无损格式，支持透明度 元素的alt属性 如果浏览器无法找到图像，将会用alt值代替 对于视力障碍，有些浏览器可能会朗读出该属性 元素的width和height属性 Copyright © hsuloong.github.io 2020 all right reserved，powered by Gitbook编辑于： 2021-01-06 14:27:27 "},"head-first-html-and-css/Part-06.html":{"url":"head-first-html-and-css/Part-06.html","title":"严肃的HTML","keywords":"","body":"严肃的HTML DOCTYPE ，告知浏览器使用标准的HTML，不用考虑标准版本号 PS：可以通过这个网站验证所编写HTML是否符合标准 https://validator.w3.org/ 元素 告诉浏览器关于HTML页面的一些信息，比如charset Copyright © hsuloong.github.io 2020 all right reserved，powered by Gitbook编辑于： 2021-01-06 14:27:27 "},"head-first-html-and-css/Part-07.html":{"url":"head-first-html-and-css/Part-07.html","title":"CSS入门","keywords":"","body":"CSS入门 CSS基本语法 p { color: maroon; } h1, h2 { font-family: sans-serif; color: gray; text-decoration: underline; } h1 { border-bottom: 1px solid black; } /* * p、h1、h2这些被称为选择器 * 上述语句称为规则，规则包括选择器、一个或多个属性和值 */ 外部样式表 样式继承 元素可以从父元素继承样式，不过并不是所有的样式都可以继承，比如边框相关样式 覆盖继承 子元素定义的样式可以覆盖父元素 类选择器 p.greentea { color: green; } .greentea { color: green; } /* * 使用class关键词定义一个类 * 然后就可以指定类的样式了 * 第一种代表段落里面的 * 第二种代表所有这种类 */ CSS验证 https://jigsaw.w3.org/css-validator/ CSS属性一览 1.color：文本颜色 2.font-weight：文本粗细 3.left：元素左边位置 4.line-height：文本元素行间距 5.top：元素顶部位置 6.letter-spacing：字母间距 7.background-color：元素背景颜色 8.border：元素周围加边框 7.padding：元素边缘和内容之间间距 8.font-size：文本字体大小 9.text-align：文本对齐方式 10.font-style：设置斜体 11.list-style：设置列表项外观 12.background-image：设置元素北京图像 Copyright © hsuloong.github.io 2020 all right reserved，powered by Gitbook编辑于： 2021-01-06 14:27:27 "},"head-first-html-and-css/Part-08.html":{"url":"head-first-html-and-css/Part-08.html","title":"增加字体和颜色样式","keywords":"","body":"增加字体和颜色样式 字体系列 body { font-family: Verdana, Geneva, Arial, sans-serif; font-size: 14px; color: silver; font-weight: bold; text-decoration: underline; } /* * 每个font-family包含一组有共同特征的字体 * 字体系列有sans-serif、serif、monospace、cursive和fantasy * sans-serif字体没有衬线 * serif字体有衬线 * monospace包含固定宽度的字符 * cursive字体包括看似手写的字体 * fantasy包含某种风格的装饰字体 * font-family可以指定多个，按照顺序选择一个用户计算机上存在的 */ Web Font(Web字体) /* * 1.woff：Web open font format * 2.ttf：TrueType * 3.otf：OpenType * 4.eot：Embedded OpenType * 5.svg */ @font-face { font-family: \"Emblema one\"; src: url(\"EmblemaOne-Regular.woff\"), url(\"EmblemaOne-Regular.ttf\"); } /* * 浏览器会顺序加载直至遇到第一个支持的额文件格式 * https://fonts.google.com/ 谷歌Web字体服务 */ font-size(字体大小) body { font-size: 14px; font-size: 150%; font-size: small; font-size: 1.2em; } /* * 指定像素尺寸则代表像素高度 * 百分比相对于正常字体的大小百分比 * em也是一种相对度量单位相当于正常字体大小的x倍 * 一般推荐使用关键字指定body规则 * 指定其他元素相对于body的百分比或者em */ font-weight body { font-weight: bold; } /* * 用来控制文本的粗细 */ font-style body { font-style: italic; } /* * 设置文本斜体 */ Web颜色 body { color: red; color: rgb(80%,40%,0%); color: rgb(204, 102, 0); color: #cc6000; } /* * 1.Web颜色是按照颜色构成红、绿、蓝三个分量所占数量来制定的(0~100%) * 2.白色=(100%,100%,100%) * 3.黑色=(0%,0%,0%) * 4.指定颜色方式：名称、rgb分量、十六进制 * 5.十六进制每两位代表颜色分量 */ text-decoration h1, h2 { text-decoration: underline; } /* * 文本装饰符 */ Copyright © hsuloong.github.io 2020 all right reserved，powered by Gitbook编辑于： 2021-01-06 14:27:27 "},"head-first-html-and-css/Part-09.html":{"url":"head-first-html-and-css/Part-09.html","title":"盒模型","keywords":"","body":"盒模型 Box model 1.内容区：content area 2.内边距：padding 3.边框：border 4.外边距：margin PS：内容-内边距-边框-外边距的夹心结构 id选择器 #guarantee { border-color: white; border-width: 1px; border-style: dashed; background-color: #a7cece; padding: 25px; padding-left: 80px; margin: 30px; margin-right: 250px; line-height: 1.9em; font-style: italic; color: #444444; font-family: Georgia, 'Times New Roman', Times, serif; background-image: url(./images/background.gif); background-repeat: no-repeat; background-position: top left; } /* * #号开头 */ 使用多个样式表 & 媒体查询 Copyright © hsuloong.github.io 2020 all right reserved，powered by Gitbook编辑于： 2021-01-06 14:27:27 "},"head-first-html-and-css/Part-10.html":{"url":"head-first-html-and-css/Part-10.html","title":"div与span","keywords":"","body":"div与span div(division) 1.是一个块元素，用于HTML的逻辑分区 2.可以理解为是一个容器 3.默认内边距为0 css width属性 1.指定的是内容区的宽度 2.盒子总宽度=左外边距+边框宽度+左内边距宽度+width+右外边距+边框宽度+右内边距宽度 3.不指定这个属性的话默认占满整个空间 子孙选择器 #elixir h2 { color: black; } /* * id为elixir的所有子孙h2元素应用这个样式 * 如果要限定直接孩子，可以增加'>'符号，如'#elixir>h2' * 可以使用多个排列，比如'#elixir p em'表示'p'是'elixir'子孙，而'em'是'p'子孙 */ line-height 1.line-height如果直接指定一个数字，表示行高是字体大小的一倍 简写 #elixir { padding-top: 0px; padding-right: 20px; padding-bottom: 20px; padding-left: 20px; } #elixir { padding: 0px 20 30 10; } /* * 上面两个等价，缩写顺序为上、右、下、左 * 如果值相同可以直接缩写为 padding: 20px; * 除了padding，很多属性都可以简写 */ span(范围) 1.span是内联元素 2.内联元素设置盒参数不一定有用 伪类(pseudo-classes) 1.一般主要针对a元素，样式顺序为link、visited、hover、focus、active 2.伪类之所以是“伪”，主要是元素属于哪个类是浏览器处理的 3.first-child、last-child 层叠 计算法则： 0 0 0 1.第一位0：在选择器每出现一个id加1 2.第二位0：在选择器每出现一个类或伪类加1 3.第三位0：在选择器每出现元素名加1 4.最后得到特性的值越大，规则就越特定 5.!important可以覆盖作者的设置 6.作者>读者>浏览器 比如 h1=001，h1.blue=011 Copyright © hsuloong.github.io 2020 all right reserved，powered by Gitbook编辑于： 2021-01-06 14:27:27 "},"head-first-html-and-css/Part-11.html":{"url":"head-first-html-and-css/Part-11.html","title":"布局与定位","keywords":"","body":"布局与定位 流 流是浏览器摆放HTML元素所用的方法， 浏览器从HTML文件最上面开始， 从上到下沿着元素流逐个显式所遇到的各个元素， 款元素之间有换行， 内联元素则会依次挨着 流与盒模型 1.并列方式两个内联元素，两个元素之间距离是外边距之和 2.上下放置两个块元素时，外边距会折叠在一起，取其中较大值 float 浏览器遇到float元素后会从流中摘出这个元素， 然后其他元素会占据空出来的位置， 对于内联元素进行定位时，会考虑浮动元素边界而围绕在浮动元素周围 float只允许浮动在左边或者右边， 浮动元素不会发生外边界折叠 clear #footer { clear: right; } /* * 表明元素不允许在左边或者右边或者两边都不允许有浮动元素 */ margin auto #allcontent { margin-left: auto; margin-right: auto; } /* * 浏览器会确保左右外边距相同，所以会将内容居中，多用于凝胶布局 */ position absolute(绝对定位) #sidebar { position: absolute; top: 100px; right: 200px; width: 280px; } /* * 1.绝对定位时，浏览器会把该元素从流中摘出 * 2.然后浏览器把元素放置在top/right标记的位置上(bottom/left也可) * 3.流中的元素不会感知绝对定位的元素 * 4.多个绝对定位元素显示层次可以用z-index控制 * 5.有4种定位：static(默认方式)、absolute、fixed、relative */ CSS表格显示 在有行、列的表格中显示块元素 Copyright © hsuloong.github.io 2020 all right reserved，powered by Gitbook编辑于： 2021-01-06 14:27:27 "},"head-first-html-and-css/Part-12.html":{"url":"head-first-html-and-css/Part-12.html","title":"HTML5标记","keywords":"","body":"HTML5标记 HTML5 1.增加了一些新元素表示一些用div认为定义的结构，如导航 time 26/12/2020 video Sorry, your brower doesn't support the video element HTML5部份新元素标签 1.aside：放在主内容旁边的内容 2.mark：突出显式某些文本 3.audio：声音媒体 4.progress：进度显式 5.footer：页脚 6.meter：显示度量 7.article：显式文章 8.canvas：显式Javascript绘制的图像 9.section：文档区块 10.header：区块的首部或者文档的页眉 11.nav：导航 12.figure：定义类似图片、图片等独立的内容 Copyright © hsuloong.github.io 2020 all right reserved，powered by Gitbook编辑于： 2021-01-06 14:27:27 "},"head-first-html-and-css/Part-13.html":{"url":"head-first-html-and-css/Part-13.html","title":"建立表格","keywords":"","body":"建立表格 table The cities I visitedon my Segway'n USA travels City Walla Walla, WA Magic City, ID table盒模型 1.表格单元格有内边距和边框 2.表格单元格没有外边距 3.使用border-spacing属性定义类似外边距的东西，这个是针对整个表格定义的 表格CSS table { caption-side: bottom; border-spacing: 0px; border-collapse: collapse; } td, th { border: thin solid gray; } th { background-color: #cc6600; } tr:nth-child(2n+1) { background-color: #fcba7a; } caption { font-style: italic; padding-top: 8px; } /* * 1.border-spacing表格间距 * 2.border-collapse边框折叠 * 3.tr:nth-child(2n+1)伪类定义不同行样式 */ 单元格跨多行或者多列 The cities I visitedon my Segway'n USA travels City Date Temperature Altitude Population Diner Rating Truth or Consequences, NM August 9th 93 4,242 ft 7,289 5/5 August 27th 98 4/5 嵌套表格 The cities I visitedon my Segway'n USA travels City Date Temperature Altitude Population Diner Rating Truth or Consequences, NM August 9th 93 4,242 ft 7,289 5/5 August 27th 98 Tess 5/5 Tony 4/5 列表一些CSS属性 li { list-style-type: square; list-style-position: outside; list-style-image: url(\"\"); } /* * 1.list-style-type：控制列表标记形状 * 2.list-style-position：控制列表文本回绕 * 3.list-style-image：自定义列表标记形状 */ Copyright © hsuloong.github.io 2020 all right reserved，powered by Gitbook编辑于： 2021-01-06 14:27:27 "},"head-first-html-and-css/Part-14.html":{"url":"head-first-html-and-css/Part-14.html","title":"HTML表单","keywords":"","body":"HTML表单 表单HTML Enter the Contest FirstName: LastName : 表单元素name属性 value属性 House Blend Shade Grown Bolivia Supremo Organic Guatemala Kenya radio number POST 和 GET POST打包数据在后台发送给服务器 GET则是追加到URL中 label元素 Choose your beans: House Blend Shade Grown Bolivia Supremo Organic Guatemala Kenya 表单中的其他元素 Ship to Name: House Blend Shade Grown Bolivia Supremo Organic Guatemala Kenya Copyright © hsuloong.github.io 2020 all right reserved，powered by Gitbook编辑于： 2021-01-06 14:27:27 "},"head-first-html-and-css/Part-15.html":{"url":"head-first-html-and-css/Part-15.html","title":"附录","keywords":"","body":"十大主题 伪元素 p:first-letter { font-size: 3em; } p::first-line { font-style: italic; } /* * 用来选择元素的部分 */ 属性选择器 img[width] { border: black thin solid; } img[height=\"300\"] { border: red thin solid; } /* * 根据属性选择器来选择元素 */ 兄弟选择器 h1+p { font-style: italic; } /* * p前面有h1元素的 */ 结合选择器 .blueberry p { color: red; } div#greenTea > blockquote { color: red; } div#greenTea > blockquote p { color: red; } div#greenTea > blockquote p:first-line { color: red; } /* * .blueberry p：选中类为 blueberry 的子孙元素 * div#greenTea > blockquote：选中 id=greenTea 的div元素的直接子元素 * div#greenTea > blockquote p：选中 id=greenTea 的div元素的直接子元素为blockquote元素下面所有的所有子孙p元素 * div#greenTea > blockquote p:first-line：选中 id=greenTea 的div元素的直接子元素为blockquote元素下面所有的所有子孙p元素的第一行 */ 浏览器开发商特定的css属性 div { transform: rotate(45deg); -webkit-transform: rotate(45deg); -moz-transform: rotate(45deg); -o-transform: rotate(45deg); -ms-transform: rotate(45deg); } /* * -webkit-transform：Safari、Chrome * -moz-transform：Mozilla * -o-transform：Opera * -ms-transform：IE */ css变换和过渡 #box { position: absolute; top: 100px; left: 100px; width: 200px; height: 200px; background-color: red; transition: transform 2s; -webkit-transition: -webkit-transform 2s; -moz-transition: -moz-transform 2s; -o-transition: -o-transform 2s; } #box:hover { transform: rotate(45deg); -webkit-transform: rotate(45deg); -moz-transform: rotate(45deg); -o-transform: rotate(45deg); -ms-transform: rotate(45deg); } 交互性 window.onload = init; function init() { var submitButton = document.getElementById(\"submitButton\"); submitButton.onclick = validBid; } function validBid() { if (document.getElementById(\"bid\").value > 0) { document.getElementById(\"theForm\").submit(); } else { return false; } } Copyright © hsuloong.github.io 2020 all right reserved，powered by Gitbook编辑于： 2021-01-06 14:27:27 "}}